<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Acmeng&#39;s blog</title>
    <link>http://example.com/</link>
    
    <atom:link href="http://example.com/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>等以不必换值价 向已死渐觉惜时</description>
    <pubDate>Thu, 21 Apr 2022 04:54:33 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>状压dp</title>
      <link>http://example.com/2022/04/20/ahut/</link>
      <guid>http://example.com/2022/04/20/ahut/</guid>
      <pubDate>Wed, 20 Apr 2022 10:50:00 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;题目：B-Nuts-for-nuts&quot;&gt;&lt;a href=&quot;#题目：B-Nuts-for-nuts&quot; class=&quot;headerlink&quot; title=&quot;题目：B - Nuts for nuts..&quot;&gt;&lt;/a&gt;题目：B - Nuts for nuts..&lt;/h1&gt;&lt;</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="题目：B-Nuts-for-nuts"><a href="#题目：B-Nuts-for-nuts" class="headerlink" title="题目：B - Nuts for nuts.."></a>题目：B - Nuts for nuts..</h1><p><a href="https://vjudge.net/contest/489839#problem/B">https://vjudge.net/contest/489839#problem/B</a><br><br/></p><h2 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h2><p><img src="/acm/5.png"></p><h2 id="细节处理："><a href="#细节处理：" class="headerlink" title="细节处理："></a>细节处理：</h2><p>&amp;emsp;&amp;emsp;注意题目中 Ryan and Larry 是可以沿对角线走的，这样两点之间的最短距离将会是对应 x、y 坐标差值中的最大值。<br><br/></p><p>WA点：注意当n和m都为1时，此时应输出0，调试了将近3个小时候才发现233333，然后参考别人的代码前先试下别人的代码能不能通过…..</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> i64=<span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">int</span> N =<span class="number">22</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> x[N],y[N],cnt,w[N][N],dp[N][<span class="number">1</span>&lt;&lt;<span class="number">16</span>];<span class="comment">//存放坐标的(x,y)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">( )</span></span>&#123;</span><br><span class="line"></span><br><span class="line">std::ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">std::cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>);</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">   <span class="type">int</span> n,m;</span><br><span class="line">   <span class="keyword">while</span>(std::cin&gt;&gt;n&gt;&gt;m)&#123;   </span><br><span class="line">   std::cin.<span class="built_in">ignore</span>();</span><br><span class="line">   <span class="comment">//std::vector&lt;std::array&lt;int,2&gt; &gt; a;</span></span><br><span class="line">   </span><br><span class="line">   <span class="type">char</span> g[<span class="number">25</span>][<span class="number">25</span>];</span><br><span class="line">   </span><br><span class="line">   <span class="type">int</span> sr,sc;</span><br><span class="line">   <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">      std::cin&gt;&gt;g[i];</span><br><span class="line"></span><br><span class="line">     <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;m;j++)&#123;</span><br><span class="line">         <span class="keyword">if</span>(g[i][j]==<span class="string">&#x27;L&#x27;</span>)&#123;</span><br><span class="line">            x[<span class="number">0</span>]=i,y[<span class="number">0</span>]=j;</span><br><span class="line">         &#125;<span class="keyword">else</span> <span class="keyword">if</span>(g[i][j]==<span class="string">&#x27;#&#x27;</span>)&#123;</span><br><span class="line">             x[++cnt]=i;</span><br><span class="line">             y[cnt]=j;</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;      </span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">if</span>(cnt==<span class="number">0</span>)&#123;</span><br><span class="line">      std::cout&lt;&lt;<span class="number">0</span>&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">      <span class="keyword">continue</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=cnt;i++)&#123;</span><br><span class="line">      <span class="keyword">for</span>(<span class="type">int</span> j=i;j&lt;=cnt;j++)&#123;</span><br><span class="line">          w[i][j]=w[j][i]=std::<span class="built_in">max</span>(std::<span class="built_in">abs</span>(x[i]-x[j]),std::<span class="built_in">abs</span>(y[i]-y[j]));</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line"> </span><br><span class="line">   <span class="comment">//std::vector&lt;std::array&lt;&gt;&gt; dp();</span></span><br><span class="line"></span><br><span class="line">   <span class="built_in">memset</span>(dp,<span class="number">0x3f</span>,<span class="built_in">sizeof</span>(dp));</span><br><span class="line">   <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=cnt;i++)&#123;</span><br><span class="line">      dp[i][<span class="number">1</span>&lt;&lt;(i<span class="number">-1</span>)]=w[i][<span class="number">0</span>];</span><br><span class="line">   &#125;</span><br><span class="line">    </span><br><span class="line">   <span class="keyword">for</span>(<span class="type">int</span> s=<span class="number">0</span>;s&lt;=((<span class="number">1</span>&lt;&lt;cnt)<span class="number">-1</span>);s++)&#123;</span><br><span class="line">           <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=cnt;i++)&#123;</span><br><span class="line">                  <span class="keyword">if</span>(!(s&amp;(<span class="number">1</span>&lt;&lt;(i<span class="number">-1</span>))))</span><br><span class="line">                     <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">                  <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=cnt;j++)&#123;</span><br><span class="line">                     <span class="keyword">if</span>(i==j)</span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                     <span class="keyword">if</span>(!(s &amp; (<span class="number">1</span>&lt;&lt;(j<span class="number">-1</span>))))&#123;</span><br><span class="line">                       dp[j][s | (<span class="number">1</span>&lt;&lt;(j<span class="number">-1</span>))]=std::<span class="built_in">min</span>(dp[j][s | (<span class="number">1</span>&lt;&lt;(j<span class="number">-1</span>))],dp[i][s]+w[j][i]);</span><br><span class="line">                     &#125;</span><br><span class="line">                  &#125;</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="type">int</span> res=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line">   <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=cnt;i++)&#123;</span><br><span class="line">      res=std::<span class="built_in">min</span>(res,dp[i][(<span class="number">1</span>&lt;&lt;cnt)<span class="number">-1</span>]+w[i][<span class="number">0</span>]);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   std::cout&lt;&lt;res&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/ahut%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/">-ahut每日一题</category>
      
      
      <category domain="http://example.com/tags/dp/">-dp</category>
      
      
      <comments>http://example.com/2022/04/20/ahut/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Codeforces Round 783 Div. 2</title>
      <link>http://example.com/2022/04/19/Codeforces%20Round%20783/</link>
      <guid>http://example.com/2022/04/19/Codeforces%20Round%20783/</guid>
      <pubDate>Tue, 19 Apr 2022 14:32:17 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;&lt;del&gt;罚坐尽常态啊！&lt;/del&gt;&lt;br&gt;&lt;br/&gt;&lt;br&gt;&lt;strong&gt;补题之路任重而道远&lt;/strong&gt;&lt;/p&gt;
&lt;h1 id=&quot;A-Direction-Change&quot;&gt;&lt;a href=&quot;#A-Direction-Change&quot; class=&quot;headerlink</description>
        
      
      
      
      <content:encoded><![CDATA[<p><del>罚坐尽常态啊！</del><br><br/><br><strong>补题之路任重而道远</strong></p><h1 id="A-Direction-Change"><a href="#A-Direction-Change" class="headerlink" title="A. Direction Change"></a>A. Direction Change</h1><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><h3 id="题目简述："><a href="#题目简述：" class="headerlink" title="题目简述："></a>题目简述：</h3><br/>&emsp;&emsp;&emsp;&emsp;给你一个n*m的棋盘，从（1，1）开始，每次可以向上下左右四个方向移动，同方向不能连续移动俩次，问能否到达(n,m)点，若可以,输出移动次数，若不可以，输出-1.<br/><br/>   <p>限制一：同方向不能连续移动俩次</p><h3 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h3><p>n<em>m的棋盘和m</em>n的棋盘是一样的,所以可以让n为俩者的最大值。<br><br/><br>第一种情况：若n&gt;&#x3D;3 &amp;&amp; m&#x3D;&#x3D;1 那肯定到达不了。(限制一)<br>其余情况：画个棋盘观察下：<br>为了到达（n,m)点的步数尽可能小，我们肯定是从（1,1）开始不断的向下或者向右走。然后画个棋盘可得到图上的规律。<br><img src="/acm/3.png"></p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> i64=<span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"><span class="keyword">constexpr</span> <span class="type">int</span> N=<span class="number">5</span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">( )</span></span>&#123;</span><br><span class="line"></span><br><span class="line">std::ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">std::cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> t;</span><br><span class="line">    std::cin&gt;&gt;t;</span><br><span class="line">    <span class="keyword">while</span>(t--)&#123;</span><br><span class="line">    <span class="type">int</span> n,m;</span><br><span class="line">       std::cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">       <span class="keyword">if</span>(n&lt;m)</span><br><span class="line">        std::<span class="built_in">swap</span>(n,m);</span><br><span class="line">       <span class="keyword">if</span>(m==<span class="number">1</span> &amp;&amp; n&gt;=<span class="number">3</span>)&#123;</span><br><span class="line">         std::cout&lt;&lt;<span class="number">-1</span>&lt;&lt;<span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">       &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">       std::cout&lt;&lt;<span class="number">2</span>*n<span class="number">-2</span>-(n+m)%<span class="number">2</span>&lt;&lt;<span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="B-Social-Distance"><a href="#B-Social-Distance" class="headerlink" title="B. Social Distance"></a>B. Social Distance</h1><h2 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h2><p><img src="/acm/4.png"></p><h2 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> i64=<span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">( )</span></span>&#123;</span><br><span class="line"></span><br><span class="line">std::ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">std::cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> t;</span><br><span class="line">    std::cin&gt;&gt;t;</span><br><span class="line">    <span class="keyword">while</span>(t--)&#123;</span><br><span class="line">    <span class="type">int</span> n,m;</span><br><span class="line">    std::cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    <span class="function">std::vector&lt;<span class="type">int</span>&gt; <span class="title">a</span><span class="params">(n)</span></span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> &amp;t :a)</span><br><span class="line">    std::cin&gt;&gt;t;</span><br><span class="line">     </span><br><span class="line">       std::<span class="built_in">sort</span>(a.<span class="built_in">begin</span>(), a.<span class="built_in">end</span>());</span><br><span class="line">       i64 ans=(i64)n+(i64)a[a.<span class="built_in">size</span>()<span class="number">-1</span>];</span><br><span class="line">       ans-=a[<span class="number">0</span>];</span><br><span class="line">       <span class="keyword">for</span>(<span class="keyword">auto</span> t:a)</span><br><span class="line">          ans+=t;</span><br><span class="line">       <span class="keyword">if</span>(ans&gt;m)&#123;</span><br><span class="line">       std::cout&lt;&lt;<span class="string">&quot;No&quot;</span>&lt;&lt;<span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">       &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">          std::cout&lt;&lt;<span class="string">&quot;Yes&quot;</span>&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="C-Make-it-Increasing"><a href="#C-Make-it-Increasing" class="headerlink" title="C. Make it Increasing"></a>C. Make it Increasing</h1><h2 id="分析-2"><a href="#分析-2" class="headerlink" title="分析"></a>分析</h2><h3 id="题意："><a href="#题意：" class="headerlink" title="题意："></a>题意：</h3><p>有俩个相同长度的数组a,b。b数组初始时全为0，每次可对a和b相同位置处做俩个操作，让b[i]-&#x3D;a[i],或者b[i]+&#x3D;a[i],操作次数不限，问最少操作多少次可使得b数组构成一个严格单调递增的序列。</p><h3 id="思路：-1"><a href="#思路：-1" class="headerlink" title="思路："></a>思路：</h3><p>首先：<br><br/><br>b数组中必有一个点满足b[i]&#x3D;0;<br><br/><br>反证法：<br><br/><br>若b数组中没有点满足b[i]&#x3D;0,则：<br>     若数组所有点都大于0，则，若让b[0]&#x3D;0则显示会比b[0]&gt;0的操作次数少<br><br/><br>若数组中有小于0的，则不妨令b[k]&lt;0,若b[k+1]&gt;0;则此时显然同样没有令b[k]&#x3D;0时的操作次数少。<br><br/><br>综上：b数组中必有一个点满足b[i]&#x3D;0,即保持不变。<br><br/><br>继续对于i前后的点进行分析：<br><br/><br>i后面的第一个点至少要比b[i]大1，第二点至少要大2依次类推，同理，i前面的第一个点至少要比i小1，前面的第二个点至少要比i处小2，那么具体到底少多少呢？我们可以这样计算：<br><br/><br>i后面的点：<br><br/><br>int t&#x3D;b[i]&#x2F;a[i+1]+1;<br><br/></p><p>b[i+1]&#x3D;a[i]*t;</p><br/>i前面的点：<br/>int t=b[i]/a[i-1]+1;<br/>b[i-1]=a[i]*(-t);<br/>这样子枚举的同时记录下操作次数就可以了。然后所有的操作次数的最小值就是答案。<h2 id="代码实现-2"><a href="#代码实现-2" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> i64 = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">( )</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   std::ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">   std::cin.<span class="built_in">tie</span>(<span class="literal">nullptr</span>);</span><br><span class="line"></span><br><span class="line">   <span class="type">int</span> n;</span><br><span class="line">   std::cin &gt;&gt; n;</span><br><span class="line">   <span class="function">std::vector&lt;<span class="type">int</span>&gt; <span class="title">a</span><span class="params">(n)</span></span>;</span><br><span class="line">   <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;t : a)</span><br><span class="line">      std::cin &gt;&gt; t;</span><br><span class="line">   i64 ans=<span class="number">1E18</span>;</span><br><span class="line">   <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">     i64 res=<span class="number">0</span>,tem=<span class="number">0</span>;<span class="comment">//res保存当第i为置为0时的操作次数，tem为b[i]的值</span></span><br><span class="line">     <span class="keyword">for</span>(<span class="type">int</span> j=i+<span class="number">1</span>;j&lt;n;j++)&#123;</span><br><span class="line">      i64 t=tem/(i64)a[j]+<span class="number">1</span>;</span><br><span class="line">      tem=t*a[j];</span><br><span class="line">      res+=t;</span><br><span class="line">     &#125;</span><br><span class="line">     tem=<span class="number">0</span>;</span><br><span class="line">     <span class="keyword">for</span>(<span class="type">int</span> j=i<span class="number">-1</span>;j&gt;=<span class="number">0</span>;j--)&#123;<span class="comment">//枚举i前面的数字</span></span><br><span class="line">      i64 t=tem/(i64)a[j]+<span class="number">1</span>;<span class="comment">//减法不好算，换成加法，反正往左数字是增大的</span></span><br><span class="line">      tem=t*a[j];</span><br><span class="line">      res+=t;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="comment">//std::cout&lt;&lt;res&lt;&lt;&quot;\n&quot;;</span></span><br><span class="line">     ans=std::<span class="built_in">min</span>(ans,res);</span><br><span class="line">   &#125;</span><br><span class="line">   std::cout&lt;&lt;ans&lt;&lt;<span class="string">&quot;\n&quot;</span>;   </span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="D-Optimal-Partition"><a href="#D-Optimal-Partition" class="headerlink" title="D. Optimal Partition"></a>D. Optimal Partition</h1><h2 id="题目介绍："><a href="#题目介绍：" class="headerlink" title="题目介绍："></a>题目介绍：</h2><p>给你一个长度为n的数组a，然后将a划分为多段，段的数量不限，每段至少有一个元素，定义s为这一段的区间和，若s&#x3D;0，则该段的价值为0，若s&gt;0,该段的价值为该段的区间长，若s&lt;0,价值为区间长的相反数。<br><br/></p><p>询问：该数组所能构成的最大价值是多少。</p><h2 id="思路：-2"><a href="#思路：-2" class="headerlink" title="思路："></a>思路：</h2><p>题目问的是整个数组所能构成的最大价值，然后对于这一数组的每一段都可以去掉最后一段，然后新的数组对吧，对于新的数组我们的询问的也是这个数组所能构成的最大价值，所以既然这样子，那我们就不妨用dp的思路来求解这一题目。<br><br/></p><p>规定:f[i]表示前i个元素所能构成的最大价值，w[j][i]表示j到i这一段的区间和。v(t)表示t这一段所能构成的价值<br><br/><br><br/></p><p>我们再来看下这个一维数组能不能表示状态转移。<br><br/><br><br/></p><p>f[i]表示前i个元素所能构成的最大价值<br><br/><br>f[j]表示前j个元素所能构成的最大价值<br><br/></p><p>假设j&lt;i,那么f[i]&#x3D;max(f[j]+v(w(j,i))).说明我们可以用这一个一维数组来表示状态转移。</p><p>这个时候，若对于每一个i，我们都从0枚举到i这一段的话，时间复杂度大概为0（n^2)级别的，肯定是过不去的。<br><br/></p><p>第一种情况: w[j][i]&gt;0</p><pre><code>      f[i]=max(f[j]+v(w))           =max(f[j]+i-j)          =i+max(f[j]-j)      即：         f[i]-i=max(f[j]-[j])      对于这种形式的转态转移方程，我们可以用线段树或者是树状数组来维护一个（f[i]-i)的值，这样就可以在O（log n）的时间内求取到i为止的最大的一个f[j]-j的值对吧。所以，在这种情况下，我们可以用树状数组的插入和查询操作来更新状态转移方程。并且我们查询的时候直接查询（i-1）这个点就行了，他会去取出从0-（i-1)之间的最大的那一个f[j]-j的值（因为我们维护的就是这个值）      那这样的话，更新操作就可以再次化简，就变成了：            **f[i]=Fenwick.sum(i-1)+i;//查询**      Fenwick.add(i，f[i]-i);//查完后注意再将当前节点插入。**      这俩者的操作顺序是根据你所写的代码的循环顺序和下标来决定的。记住核心就行，对于每一点i，都要查询一下到i-1为止的最大值，然后记得更新i这一点就行。</code></pre><p>第二种情况：w[j][i]&#x3D;&#x3D;0</p><pre><code>       我们假设这一段的区间长度为k       2.1  若k为偶数，则必然可分为长度相等的俩段，倘若一段的区间和大于0，一段的小于0，此时，对于总笞案来说，分与不分该段所带来的价值不变。（为0的区间一直向下划分，直到没法再划分了或者是这种情况为止）       2.2若k为奇数，可能有以下的划分情况:                    1.前大半段大于0或者后大半段大于0(因为此时划分为俩段时俩段的长度不等)            那么这样子划分后，该段的总价值会变大(不划分的话是0，划分的话为大于0的数)                     2，前后相等的俩段为正数，中间一个数为负数，此时价值也会变大</code></pre><h2 id="代码实现-3"><a href="#代码实现-3" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><h2 id="分析-3"><a href="#分析-3" class="headerlink" title="分析"></a>分析</h2><h2 id="代码实现-4"><a href="#代码实现-4" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/Codeforces/">-Codeforces</category>
      
      
      <category domain="http://example.com/tags/Codeforces/">-Codeforces</category>
      
      
      <comments>http://example.com/2022/04/19/Codeforces%20Round%20783/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>状压dp</title>
      <link>http://example.com/2022/04/19/zy/</link>
      <guid>http://example.com/2022/04/19/zy/</guid>
      <pubDate>Tue, 19 Apr 2022 07:58:17 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;状态压缩dp&quot;&gt;&lt;a href=&quot;#状态压缩dp&quot; class=&quot;headerlink&quot; title=&quot;状态压缩dp&quot;&gt;&lt;/a&gt;状态压缩dp&lt;/h1&gt;&lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="状态压缩dp"><a href="#状态压缩dp" class="headerlink" title="状态压缩dp"></a>状态压缩dp</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><br/><h2 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h2><p>状态压缩dp可分为下面俩大类<br><img src="/../../themes/butterfly/source/acm/2.png"><br>棋盘式的基于连通性的，或者是判断集合中是否含有某个元素</p>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/acm/">-acm</category>
      
      
      <category domain="http://example.com/tags/dp/">-dp</category>
      
      
      <comments>http://example.com/2022/04/19/zy/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>AtCoder Beginner Contest 248</title>
      <link>http://example.com/2022/04/18/At%20248/</link>
      <guid>http://example.com/2022/04/18/At%20248/</guid>
      <pubDate>Mon, 18 Apr 2022 02:16:17 GMT</pubDate>
      
      <description>异或，dp</description>
      
      
      
      <content:encoded><![CDATA[<h1 id="A-Lacked-Number"><a href="#A-Lacked-Number" class="headerlink" title="A - Lacked Number"></a>A - Lacked Number</h1><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>本题思路有很多，膜拜了jly的代码后，发现这题可以通过异或运算解决，正好复习下异或的相关知识。<br>异或思路：<br><br/><br><br/><br>0——9:共可以构成5组每相邻的俩个数字，也就是说0-9异或的结果是五个1异或，也就是1，<br>再加上异或是满足交换律的，所以1与其他没有缺失的数字异或的结果就是缺失的数字<br><br/><br><br/><br>（0^1）^（2^3）^….9&#x3D;1;<br>缺失的数字^其他所有的数字异或的结果&#x3D;1；<br>1^其他所有的数字异或的结果&#x3D;缺失的数字</p><h3 id="异或"><a href="#异或" class="headerlink" title="异或"></a>异或</h3><p>常用性质：</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">a^a=0;//相同数字的异或结果为0</span></span><br><span class="line"><span class="string">a^0=a;//与0异或结果不变</span></span><br><span class="line"></span><br><span class="line"><span class="string">异或的结果与其中一个数字异或得另一个数字</span></span><br><span class="line"><span class="string">a^b=c;</span></span><br><span class="line"><span class="string">a^c=b;</span></span><br><span class="line"><span class="string">b^c=a;</span></span><br><span class="line"></span><br><span class="line"><span class="string">对于一个一位二进制数，与1异或相当于取反，与0异或保持不变</span></span><br><span class="line"><span class="number">0</span><span class="string">^1=1；</span></span><br><span class="line"><span class="number">1</span><span class="string">^1=0；</span></span><br><span class="line"></span><br><span class="line"><span class="number">1</span><span class="string">^0=1;</span></span><br><span class="line"><span class="number">0</span><span class="string">^0=0;</span></span><br><span class="line"></span><br><span class="line"><span class="number">0</span><span class="string">^1,2^3，4^5,这样从零开始的每相邻俩个数字的异或的结果均为1，从1开始不一定满足</span></span><br><span class="line"></span><br><span class="line"><span class="string">异或的时候无所谓是字符类型的还是整型的，输出的时候注意下就行</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="comment">//#include &lt;sstream&gt;</span></span><br><span class="line"><span class="comment">//#include &lt;bitset&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _for(i, a, b) for (int i = int(a); i &lt; int(b); i++)</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> vector&lt;<span class="type">int</span>&gt; VI;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; PII;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">double</span>, <span class="type">double</span>&gt; PDD;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">10000</span> + <span class="number">5</span>,p = <span class="number">998244353</span>;</span><br><span class="line"><span class="type">bool</span> vis[N]; <span class="comment">//判断当前的颜色有没有被访问过</span></span><br><span class="line">VI ys;       <span class="comment">//存储离散化后的值</span></span><br><span class="line"><span class="type">int</span> n,m,res;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">char</span> ans = <span class="number">1</span>;</span><br><span class="line">  string s;</span><br><span class="line">  cin &gt;&gt; s;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">auto</span> c : s)</span><br><span class="line">    ans ^= c;</span><br><span class="line">  cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">solve</span>();</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="B-Slimes"><a href="#B-Slimes" class="headerlink" title="B - Slimes"></a>B - Slimes</h1><h2 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h2><p>模拟即可，每次将a的值变为原来的k倍，</p><p>最坏情况下a的值为1，k为2，b为1e9,每次变为原来的俩倍，</p><p>最坏情况下时间复杂度为0（log1e9),是不会超时的，直接模拟就行了，哎，时间复杂度这块是真的得好好补下了。</p><p>毒瘤点：注意a和K的乘积是有可能超过int范围的，所以需要需要开long long（假设a&#x3D;1e8,k&#x3D;1e8,乘一下直接爆int了）</p><h2 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="comment">//#include &lt;sstream&gt;</span></span><br><span class="line"><span class="comment">//#include &lt;bitset&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _for(i, a, b) for (int i = int(a); i &lt; int(b); i++)</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> LL;</span><br><span class="line"><span class="keyword">typedef</span> vector&lt;<span class="type">int</span>&gt; VI;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; PII;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">double</span>, <span class="type">double</span>&gt; PDD;</span><br><span class="line"><span class="type">int</span> T, n, cnt, m;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">10000</span> + <span class="number">5</span>;</span><br><span class="line"><span class="type">int</span> A, B, K;</span><br><span class="line"><span class="type">bool</span> vis[N]; <span class="comment">//判断当前的颜色有没有被访问过</span></span><br><span class="line">VI ys;       <span class="comment">//存储离散化后的值</span></span><br><span class="line"><span class="type">int</span> p = <span class="number">998244353</span>;</span><br><span class="line"><span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  LL A, B, K;</span><br><span class="line">  cin &gt;&gt; A &gt;&gt; B &gt;&gt; K;</span><br><span class="line">  <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span> (A &lt; B)</span><br><span class="line">  &#123;</span><br><span class="line">    A *= K;</span><br><span class="line">    ans++;</span><br><span class="line">  &#125;</span><br><span class="line">  cout &lt;&lt; ans &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">solve</span>();</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="C-Dice-Sum"><a href="#C-Dice-Sum" class="headerlink" title="C - Dice Sum"></a>C - Dice Sum</h1><h2 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h2><p>题目大意：从1-m这m个数字中选取n个数字，求选出的数字之和小于等于k的方案数。并且每一个数字都可以多次选取<br><br/><br><br/><br>如果直接暴力枚举选取n个数字，则时间复杂度为m的n次方，必挂。<br><br/><br><br/><br>这时想到，这道题本质上不就是有限制的选择问题么（限制只能选取n个数字），那也就是说背包问题，也即dp问题<br><br/><br><br/><br>我们dp数组的属性很显然就是选取的方案数了，那该用几维的数组来表示这一数组呢？<br><br/><br><br/><br>最开始用一个二维的数组肯定是可以的，对吧，一个表示选取的数字，一个表示当前的数字之和<br>&amp;nbsp;<br><img src="/themes/butterfly/source/acm/1.png" alt="dp分析图"><br><br/><br><br/><br>那这样的话三层循环就可以解决选取问题<br><br/><br>&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;第一层表示当前已经选取的数字数i，<br>                    <br/><br> &amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;                      &amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;第二层表示当前的数字之和j，<br> <br/><br>      &amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;                      第三层枚举选取的数字k。<br><br/><br><br/><br>最终的结果即为，dp[n][1]+dp[n][2]+….+dp[n][k];<br><br/><br><br/><br>细节点：<br><br/><br>&amp;emsp;&amp;emsp;&amp;emsp;数组的初始化：<br><br/><br>f[1][1]&#x3D;1,当i&#x3D;1时，所有m范围内的数字都应初始化为1，而大于m的，都应初始化为0，因为他们是无法通过选取一个数字就能得到的。</p><h2 id="代码实现-2"><a href="#代码实现-2" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="comment">//#include &lt;sstream&gt;</span></span><br><span class="line"><span class="comment">//#include &lt;bitset&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _for(i, a, b) for (int i = int(a); i &lt; int(b); i++)</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> LL;</span><br><span class="line"><span class="keyword">typedef</span> vector&lt;<span class="type">int</span>&gt; VI;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; PII;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">double</span>, <span class="type">double</span>&gt; PDD;</span><br><span class="line"><span class="type">int</span> T, n, cnt, m;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">10000</span> + <span class="number">5</span>, p = <span class="number">998244353</span>;</span><br><span class="line"><span class="type">bool</span> vis[N]; <span class="comment">//判断当前的颜色有没有被访问过</span></span><br><span class="line">VI ys;       <span class="comment">//存储离散化后的值</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> f[N][N]; <span class="comment">// dp[i][j]表示选取了i个数字且总和为j的方案数</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">int</span> n, m, k;</span><br><span class="line">  cin &gt;&gt; n &gt;&gt; m &gt;&gt; k;</span><br><span class="line">  <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">  f[<span class="number">1</span>][<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">  _for(i, <span class="number">1</span>, n + <span class="number">1</span>) <span class="comment">//选取了多少个数字</span></span><br><span class="line">  &#123;</span><br><span class="line">    _for(j, <span class="number">1</span>, k + <span class="number">1</span>) <span class="comment">//选取的数字的和不超过j</span></span><br><span class="line">    &#123;</span><br><span class="line">      _for(t, <span class="number">1</span>, m + <span class="number">1</span>) <span class="comment">//待选取的数字</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">if</span> (i == <span class="number">1</span>) <span class="comment">//数组的细节处理</span></span><br><span class="line">        &#123;</span><br><span class="line">          <span class="keyword">if</span> (j &lt;= m)</span><br><span class="line">            f[i][j] = <span class="number">1</span>; <span class="comment">//只有当有这个数字的时候才初始化为1，若m范围内没有这个数字的话自然就拼不成了</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (j + t &lt;= k)</span><br><span class="line">        &#123;</span><br><span class="line">          f[i + <span class="number">1</span>][j + t] = (f[i + <span class="number">1</span>][j + t] % p + f[i][j] % p) % p;</span><br><span class="line">          <span class="comment">// cout &lt;&lt; i + 1 &lt;&lt; &#x27; &#x27; &lt;&lt; t &lt;&lt; &#x27; &#x27; &lt;&lt; f[i + 1][j + t] &lt;&lt; &#x27; &#x27; &lt;&lt; f[i][j] &lt;&lt; &#x27;\n&#x27;;</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  _for(i, <span class="number">1</span>, k + <span class="number">1</span>)</span><br><span class="line">      res = (res + f[n][i]) % p;</span><br><span class="line">  cout &lt;&lt; res &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">solve</span>();</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="D-Range-Count-Query"><a href="#D-Range-Count-Query" class="headerlink" title="D - Range Count Query"></a>D - Range Count Query</h1><h2 id="思路-3"><a href="#思路-3" class="headerlink" title="思路"></a>思路</h2><br/><p>题目要求：输入n个数字，q次询问，每次输出l-r范围内值为x的个数。<br><br/></p><p>做法：<br><br/></p><p>输入的时候将数字所有出现的位置记录下来，存到一个vector里面，然后对于x直接查询大于l的第一个数，和大于r的第一个数，俩者相减即为个数。<br><br/></p><p>注意：<br><br/><br>  右边界一定是大于r的第一个位置，这样才能计算出l-r，范围内的个数，右边界向大于r的位置，左边界指向大于等于l的位置，这样才能满足二者之间的数字都为l-r范围内的。<br><br/><br><br/></p><h2 id="代码实现-3"><a href="#代码实现-3" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="comment">//#include &lt;sstream&gt;</span></span><br><span class="line"><span class="comment">//#include &lt;bitset&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _for(i, a, b) for (int i = int(a); i &lt; int(b); i++)</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> LL;</span><br><span class="line"><span class="keyword">typedef</span> vector&lt;<span class="type">int</span>&gt; VI;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; PII;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">double</span>, <span class="type">double</span>&gt; PDD;</span><br><span class="line"><span class="type">int</span> T, n, cnt, m;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">2e5</span> + <span class="number">5</span>, p = <span class="number">998244353</span>;</span><br><span class="line"><span class="type">bool</span> vis[N]; <span class="comment">//判断当前的颜色有没有被访问过</span></span><br><span class="line">VI ys;       <span class="comment">//存储离散化后的值</span></span><br><span class="line"><span class="function">vector&lt;VI&gt; <span class="title">a</span><span class="params">(N)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">int</span> n;</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>, x; i &lt;= n; i++)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;x);</span><br><span class="line">    a[x].<span class="built_in">push_back</span>(i);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="type">int</span> q;</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;q);</span><br><span class="line">  <span class="keyword">while</span> (q--)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="type">int</span> l, r, x;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;l, &amp;r, &amp;x);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">upper_bound</span>(a[x].<span class="built_in">begin</span>(), a[x].<span class="built_in">end</span>(), r) - <span class="built_in">lower_bound</span>(a[x].<span class="built_in">begin</span>(), a[x].<span class="built_in">end</span>(), l));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">solve</span>();</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="E-K-colinear-Line"><a href="#E-K-colinear-Line" class="headerlink" title="E - K-colinear Line"></a>E - K-colinear Line</h1><h2 id="思路-4"><a href="#思路-4" class="headerlink" title="思路"></a>思路</h2><br/><br/><h2 id="代码实现-4"><a href="#代码实现-4" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h1 id="F-Keep-Connect"><a href="#F-Keep-Connect" class="headerlink" title="F - Keep Connect"></a>F - Keep Connect</h1><h2 id="思路-5"><a href="#思路-5" class="headerlink" title="思路"></a>思路</h2><h2 id="代码实现-5"><a href="#代码实现-5" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h1 id="G-GCD-cost-on-the-tree"><a href="#G-GCD-cost-on-the-tree" class="headerlink" title="G - GCD cost on the tree"></a>G - GCD cost on the tree</h1><h2 id="思路-6"><a href="#思路-6" class="headerlink" title="思路"></a>思路</h2><h2 id="代码实现-6"><a href="#代码实现-6" class="headerlink" title="代码实现"></a>代码实现</h2><h1 id="Ex-Beautiful-Subsequences"><a href="#Ex-Beautiful-Subsequences" class="headerlink" title="Ex - Beautiful Subsequences"></a>Ex - Beautiful Subsequences</h1><h2 id="思路-7"><a href="#思路-7" class="headerlink" title="思路"></a>思路</h2><h2 id="代码实现-7"><a href="#代码实现-7" class="headerlink" title="代码实现"></a>代码实现</h2>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/Atcoder/">-Atcoder</category>
      
      
      <category domain="http://example.com/tags/Atcoder/">-Atcoder</category>
      
      
      <comments>http://example.com/2022/04/18/At%20248/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>日记</title>
      <link>http://example.com/2022/04/15/diary/</link>
      <guid>http://example.com/2022/04/15/diary/</guid>
      <pubDate>Fri, 15 Apr 2022 13:12:21 GMT</pubDate>
      
      <description>有东西被加密了, 请输入密码查看.</description>
      
      
      
      <content:encoded><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="8e3f521798c355bbaeb412846fe2995a8c75510759a4059a5a6921aa1cbdbb93"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">抱歉，这是付费才能观看的内容，若你已知密码可输入此处</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content:encoded>
      
      
      
      <category domain="http://example.com/tags/%E6%97%A5%E8%AE%B0/">日记</category>
      
      
      <comments>http://example.com/2022/04/15/diary/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Markdown的常用操作语法</title>
      <link>http://example.com/2022/04/10/Markdown-test/</link>
      <guid>http://example.com/2022/04/10/Markdown-test/</guid>
      <pubDate>Sun, 10 Apr 2022 06:29:17 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;This is my first test passage!&lt;br&gt;Now , let’s begin ! &lt;/p&gt;
&lt;h1 id=&quot;常用操作&quot;&gt;&lt;a href=&quot;#常用操作&quot; class=&quot;headerlink&quot; title=&quot;常用操作&quot;&gt;&lt;/a&gt;常用操作&lt;/h1&gt;&lt;h2</description>
        
      
      
      
      <content:encoded><![CDATA[<p>This is my first test passage!<br>Now , let’s begin ! </p><h1 id="常用操作"><a href="#常用操作" class="headerlink" title="常用操作"></a>常用操作</h1><h2 id="插入图片"><a href="#插入图片" class="headerlink" title="插入图片"></a>插入图片</h2><p>‘’’<br><img src="/url/"><br>‘’’<br><img src="/webuseimg/test1.jpg" alt="这里写图片的描述,可不填"></p><h2 id="插入代码"><a href="#插入代码" class="headerlink" title="插入代码"></a>插入代码</h2><figure class="highlight c++"><figcaption><span>hello_world 示例</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;Hello World!&quot;</span>;</span><br><span class="line">cout&lt;&lt;endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/webuseimg/daima.png"></p><h2 id="外置链接"><a href="#外置链接" class="headerlink" title="外置链接"></a>外置链接</h2><p>qq空间地址示范:<a href="https://user.qzone.qq.com/1473166315?ADUIN=1473166315&amp;ADSESSION=1649569161&amp;ADTAG=CLIENT.QQ.5887_MyInfo_PersonalInfo.0&amp;ADPUBNO=27211&amp;source=namecardstar">https://user.qzone.qq.com/1473166315?ADUIN=1473166315&amp;ADSESSION=1649569161&amp;ADTAG=CLIENT.QQ.5887_MyInfo_PersonalInfo.0&amp;ADPUBNO=27211&amp;source=namecardstar</a></p>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/test/">-test</category>
      
      
      <category domain="http://example.com/tags/test/">-test</category>
      
      
      <comments>http://example.com/2022/04/10/Markdown-test/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>高斯消元法</title>
      <link>http://example.com/2022/04/10/gaosi/</link>
      <guid>http://example.com/2022/04/10/gaosi/</guid>
      <pubDate>Sun, 10 Apr 2022 06:29:17 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;高斯消元&quot;&gt;&lt;a href=&quot;#高斯消元&quot; class=&quot;headerlink&quot; title=&quot;高斯消元&quot;&gt;&lt;/a&gt;高斯消元&lt;/h1&gt;&lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="高斯消元"><a href="#高斯消元" class="headerlink" title="高斯消元"></a>高斯消元</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>可以在O(n^3)的时间复杂度内求解包含n个方程和n个未知数的多元线性方程组。</p><p>解有三种情况：无解 || 无穷多组解 || 唯一解</p><p>高斯方程的大概样子：<br><img src="/webuseimg/gaosi.png" alt="高斯方程"></p><h2 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h2><p>我们把系数抽取出来会构成一个n*(N+1) 的系数矩阵，然后对他做若干次的初等行变换，最终使方程组变成一个上三角的形式，这样尽可以很容易求出方程组的解<br><img src="/webuseimg/xishu.jpg" alt="最终的系数矩阵形式"></p><p>初等行变换有三种形式：<br>      1.把某一行乘以一个非零的数<br>      2.交换某俩行<br>      3.把某行的若干倍加到另一行</p><h3 id="判断解的个数"><a href="#判断解的个数" class="headerlink" title="判断解的个数"></a>判断解的个数</h3><p>若第一行有n个系数，第二行有n-1个系数，以此类推，满足每行减一的话，就说它构成了一个完美阶梯形，那么此时就有唯一解</p><p>若最终没有构成完美的阶梯形，但是出现了0&#x3D;0的形式（代表该项是多余的，完全可以用上面的其他的方程组代替）的话，就会有无穷多组解</p><p>若某行方程的左边为0，右边非零，此时无解</p><h2 id="高斯消元的算法步骤"><a href="#高斯消元的算法步骤" class="headerlink" title="高斯消元的算法步骤"></a>高斯消元的算法步骤</h2><pre><code>1.枚举每一列c:从第一列开始   1.找到当前列绝对值最大的那个数，假设那个数所在的行为r   2.然后将r与当前最上面的行 当前最上面的行，当前最上面的行 交换   3.将当前最上面行的第一个数通过除以或者乘x变换变成1，然后其他数字也需进行同样的操作。   4.将下面所有行的第c列变为0（通过初等行变换，都减去当前最上门行的若干倍使第c列变为0）2.然后看下现在的系数矩阵的形式判断解的个数3.再从最后一行开始做初等行变换，使得每一行都是左边只有一个不为0的系数右边只有一个数字的形式，系数所对应的解（xi,i=1,2,3,4..)即为右边的数字。</code></pre><h2 id="代码示范："><a href="#代码示范：" class="headerlink" title="代码示范："></a>代码示范：</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N =<span class="number">110</span>;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">double</span> a[N][N];<span class="comment">//存放系数矩阵</span></span><br><span class="line"><span class="type">const</span> <span class="type">double</span> eps=<span class="number">1e-6</span>;<span class="comment">//精度误差</span></span><br><span class="line"><span class="comment">//高斯消元函数的话定义三个返回值</span></span><br><span class="line"><span class="comment">//分别代表一个解，无穷多个解和无解</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">gauss</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="type">int</span> c,r;<span class="comment">//列，行</span></span><br><span class="line">   <span class="keyword">for</span>(c=<span class="number">0</span>,r=<span class="number">0</span>;c&lt;n;c++)<span class="comment">//枚举每一列，r代表最上面为哪一行</span></span><br><span class="line">   &#123;</span><br><span class="line">       <span class="type">int</span> t=r;</span><br><span class="line">       <span class="keyword">for</span>(<span class="type">int</span> i=r;i&lt;n;i++)<span class="comment">//找到最大的数字所在的行</span></span><br><span class="line">         <span class="keyword">if</span>(<span class="built_in">fabs</span>(a[i][c])&gt;<span class="built_in">fabs</span>(a[t][c]))</span><br><span class="line">           t=i;</span><br><span class="line">      </span><br><span class="line">       <span class="comment">//小于误差时即可认为当前的数字为0 </span></span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">fabs</span>(a[t][c])&lt;eps)</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//将该行数字都换到最上面去，</span></span><br><span class="line">        <span class="comment">//现在最上面是r行，操作的是t行</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=c;i&lt;=n;i++)</span><br><span class="line">          <span class="built_in">swap</span>(a[t][i],a[r][i]);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将最上面行的每一个数字都除以第一个非零数，</span></span><br><span class="line">        <span class="comment">//这样第一数字的系数为1，即a[r][c]=1</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=n;i&gt;=c;i--)</span><br><span class="line">          a[r][i]/=a[r][c];</span><br><span class="line">        <span class="comment">//将下面的每一行的这一列的数字都置为零</span></span><br><span class="line">        <span class="comment">//即都减去第一行的a[i][c]倍</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=r+<span class="number">1</span>;i&lt;n;i++)</span><br><span class="line">          <span class="keyword">if</span>(<span class="built_in">fabs</span>(a[i][c])&gt;eps)<span class="comment">//大于精度，表不为零</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=n;j&gt;=c;j--)</span><br><span class="line">              a[i][j]-=a[r][j]*a[i][c];</span><br><span class="line">         r++;<span class="comment">//将当前的最上面行加1，表示下一个最上面行</span></span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">if</span>(r&lt;n)<span class="comment">//不是完美阶梯形</span></span><br><span class="line">   &#123;</span><br><span class="line">      <span class="keyword">for</span>(<span class="type">int</span> i=r;i&lt;n;i++)</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">fabs</span>(a[i][n])&gt;eps)</span><br><span class="line">          <span class="keyword">return</span> <span class="number">2</span>;<span class="comment">//无解</span></span><br><span class="line">      <span class="keyword">return</span> <span class="number">1</span>;<span class="comment">//无穷多组解</span></span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">for</span>(<span class="type">int</span> i=n<span class="number">-1</span>;i&gt;=<span class="number">0</span> ;i--)<span class="comment">//倒着将系数消一下，把xi右边到b之前的全置为0</span></span><br><span class="line">     <span class="keyword">for</span>(<span class="type">int</span> j=i+<span class="number">1</span>;j&lt;n;j++)</span><br><span class="line">       a[i][n]-=a[i][j]*a[j][n];</span><br><span class="line">   <span class="comment">//a[i][n]代表xi所对应的解（即最终的b值），a[j][n]xj，a[i][j]就是xi右边的数字</span></span><br><span class="line">   <span class="comment">//最终的效果就是，每个方程（每一行）左边只有一个1，右边只有一个b代表当前系数的解为b。</span></span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;<span class="comment">//有唯一解</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">      <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;n+<span class="number">1</span>;j++)</span><br><span class="line">        cin&gt;&gt;a[i][j];</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> t=<span class="built_in">gauss</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(t==<span class="number">0</span>)<span class="comment">//唯一解</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">          <span class="built_in">printf</span>(<span class="string">&quot;%.2lf\n&quot;</span>,a[i][n])</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(t==<span class="number">1</span>)<span class="comment">//无穷多组解</span></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">    &#125;<span class="comment">//无解</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/acm/">-acm</category>
      
      
      <category domain="http://example.com/tags/%E6%95%B0%E8%AE%BA/">-数论</category>
      
      
      <comments>http://example.com/2022/04/10/gaosi/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>组合数学</title>
      <link>http://example.com/2022/04/10/zuhe/</link>
      <guid>http://example.com/2022/04/10/zuhe/</guid>
      <pubDate>Sun, 10 Apr 2022 06:29:17 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;组合数&quot;&gt;&lt;a href=&quot;#组合数&quot; class=&quot;headerlink&quot; title=&quot;组合数&quot;&gt;&lt;/a&gt;组合数&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/../../public/webuseimg/zh.png&quot; alt=&quot;组合数例子&quot;&gt;&lt;/p&gt;
&lt;h2 id=</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="组合数"><a href="#组合数" class="headerlink" title="组合数"></a>组合数</h1><p><img src="/../../public/webuseimg/zh.png" alt="组合数例子"></p><h2 id="常见计算组合数式子"><a href="#常见计算组合数式子" class="headerlink" title="常见计算组合数式子"></a>常见计算组合数式子</h2><h3 id="式子一：递推"><a href="#式子一：递推" class="headerlink" title="式子一：递推"></a>式子一：递推</h3><p>通过递推的方式求取组合数</p><p><img src="/../../public/webuseimg/zh1.png" alt="组合数递推式子"></p><p>公式的由来：从a个苹果中选取b个苹果，假设a个苹果中有一个特殊的苹果d，那么选取的时候如果不包含d，就是从（a-1)个苹果中选取b个苹果，若包含d，就是从a-1个苹果中选取b-1个苹果。综上，就有上述式子。</p><p><img src="/../../public/webuseimg/zh2.png" alt="组合数递推式子"></p><h3 id="式子一代码"><a href="#式子一代码" class="headerlink" title="式子一代码"></a>式子一代码</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> N =<span class="string">&quot;&quot;</span>,mod=<span class="string">&quot;&quot;</span>;<span class="comment">//题目可能要求取模</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> c[N][N];<span class="comment">//c[a][b]即为组合数的解</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;N;i++)</span><br><span class="line">     <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;N;j++)</span><br><span class="line">       <span class="keyword">if</span>(!j) c[i][j]=<span class="number">1</span>;</span><br><span class="line">         <span class="keyword">else</span> c[i][j]=(c[i<span class="number">-1</span>][j]+c[i<span class="number">-1</span>][j<span class="number">-1</span>])%mod;<span class="comment">//取模的写法，</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="式子二：逆元（费马小定理-快速幂）-阶乘"><a href="#式子二：逆元（费马小定理-快速幂）-阶乘" class="headerlink" title="式子二：逆元（费马小定理+快速幂）+阶乘"></a>式子二：逆元（费马小定理+快速幂）+阶乘</h3><p><img src="/../../public/webuseimg/zh3.png"></p><p>fact[i]表示i的阶乘，infact[i]表示i的逆元(需要后加一个超链接，跳转到逆元)</p><h3 id="式子二代码"><a href="#式子二代码" class="headerlink" title="式子二代码"></a>式子二代码</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> LL;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N =<span class="string">&quot;&quot;</span>,mod=<span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> fact[N],infact[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">qmi</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> k,<span class="type">int</span> p)</span><span class="comment">//快速幂模板</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> res=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(k)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(k&amp;<span class="number">1</span>) res=(LL)res*a%p;</span><br><span class="line">        a=(LL)a*a % p;</span><br><span class="line">        k&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">   <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   fact[<span class="number">0</span>]=infact[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">   <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;N;i++)</span><br><span class="line">   &#123;</span><br><span class="line">      fact[i]=(LL)fact[i<span class="number">-1</span>]*i%mod;</span><br><span class="line">      infact[i]=(LL)infact[i<span class="number">-1</span>]*<span class="built_in">qmi</span>(i,mod<span class="number">-2</span>,mod)%mod;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="type">int</span> n;</span><br><span class="line">   cin&gt;&gt;n;</span><br><span class="line">   <span class="keyword">while</span>(n--)</span><br><span class="line">   &#123;</span><br><span class="line">       <span class="type">int</span> a,b;</span><br><span class="line">       cin&gt;&gt;a&gt;&gt;b;</span><br><span class="line">       <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,(LL)fact[a]*infact[b]%mod * infact[a-b]% mod);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="式子3：卢克斯定理"><a href="#式子3：卢克斯定理" class="headerlink" title="式子3：卢克斯定理"></a>式子3：卢克斯定理</h3><p><img src="/../../public/webuseimg/zh4.png"></p><h3 id="代码示范："><a href="#代码示范：" class="headerlink" title="代码示范："></a>代码示范：</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> N =<span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> LL;</span><br><span class="line"><span class="type">int</span> p;<span class="comment">//p表示模</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">qmi</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> k,<span class="type">int</span> p)</span><span class="comment">//快速幂模板</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> res=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(k)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(k&amp;<span class="number">1</span>) res=(LL)res*a%p;</span><br><span class="line">        a=(LL)a*a % p;</span><br><span class="line">        k&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">   <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">C</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="type">int</span> res=<span class="number">1</span>;</span><br><span class="line">   <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>,j=a;i&lt;=b;i++,j--)</span><br><span class="line">   &#123; </span><br><span class="line">       res=(LL)res * j % p;</span><br><span class="line">       res=(LL)res * <span class="built_in">qmi</span>(i,p<span class="number">-2</span>,p) % p;</span><br><span class="line">   &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">lucas</span><span class="params">(LL a,LL b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(a&lt;p &amp;&amp; b&lt;p) <span class="keyword">return</span> <span class="built_in">C</span>(a,b);</span><br><span class="line">    <span class="keyword">return</span> (LL)<span class="built_in">C</span>(a%p,b%p)*<span class="built_in">lucas</span>(a/p,/p) % p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin&gt;&gt;n;<span class="comment">//n组输入</span></span><br><span class="line">    <span class="keyword">while</span>(n--)</span><br><span class="line">    &#123;</span><br><span class="line">        LL a,b;</span><br><span class="line">        cin&gt;&gt;a&gt;&gt;b&gt;&gt;p;</span><br><span class="line">        cout&lt;&lt;<span class="built_in">lucas</span>(a,b)&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="式子4：结果不要求取模，要直接高精度输出"><a href="#式子4：结果不要求取模，要直接高精度输出" class="headerlink" title="式子4：结果不要求取模，要直接高精度输出"></a>式子4：结果不要求取模，要直接高精度输出</h3><p>思路：<br>    1.先将a，b分解质因数<br>    2.分解完后用高精度乘法处理即可</p><p>这样就避免了同时需要高精度乘法和除法了</p>]]></content:encoded>
      
      
      <category domain="http://example.com/categories/acm/">-acm</category>
      
      
      <category domain="http://example.com/tags/%E6%95%B0%E8%AE%BA/">-数论</category>
      
      
      <comments>http://example.com/2022/04/10/zuhe/#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>
